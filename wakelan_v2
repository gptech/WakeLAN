#!/bin/bash

#       wakelan- Wakes up computers on LAN.
#       Copyright 2012 Lemar Carthens <lemar.carthens1@gmail.com>
#       Version 2 - SQLite Support
#       
#       Resources from: 
#       http://www.sqlite.org/
#       http://quickies.andreaolivato.net/post/133473114/using-sqlite3-in-bash
#       http://stackoverflow.com/questions/2049109/how-to-import-sql-into-sqlite3

SQLITE="sqlite3"
CONFIG_FILE=".wakelan.conf"
SCAN_RESULTS=".scan_results.csv"

# DB Variables
DB_FILE="wakelan.db"

# Declare the program_info and sql_func as associative arrays
# This prevents a 'bad array subscript' error.
declare -A program_info
declare -A sql_func

# Associative arrays allow the string to be called easily and descriptively.
# ex. program_info VERSION
 
program_info()
{
    prog_info[PROGNAME]=$(basename $0)
    prog_info[VERSION]="2.1.1"
    prog_info[VER_INFO]="SQL Func Test"    
    
    echo "${prog_info["$1"]}"
}

load_sql()
{   
    # SQL Table Names
    sql_func[TABLE_NAME]="client"
    sql_func[SCANNED_TABLE_NAME]="temp_${sql_func[TABLE_NAME]}"
    # Table Creation SQL
    sql_func[INITIAL_TABLE_STRUCTURE]="CREATE TABLE ${sql_func[TABLE_NAME]} (id INTEGER PRIMARY KEY,IpAddress TEXT,Hostname TEXT COLLATE NOCASE, MacAddress TEXT COLLATE NOCASE,UNIQUE(id,Hostname,MacAddress) ON CONFLICT REPLACE );"
    sql_func[SCAN_TABLE_STRUCTURE]="CREATE TABLE ${sql_func[SCANNED_TABLE_NAME]} (IpAddress TEXT,Hostname TEXT COLLATE NOCASE, MacAddress TEXT COLLATE NOCASE);"
    # SQL for importing values
    sql_func[IMPORT_INIT_SCAN_DATA]="INSERT INTO ${sql_func[SCANNED_TABLE_NAME]} (IpAddress,Hostname,MacAddress) VALUES ('${ip_array[$counter]}','${host_array[$counter]}','${mac_array[$counter]}');"
    sql_func[IMPORT_DISTINCT_SCAN_DATA]="INSERT INTO ${sql_func[TABLE_NAME]} (IpAddress,Hostname,MacAddress) SELECT DISTINCT IpAddress,Hostname,MacAddress FROM ${sql_func[SCANNED_TABLE_NAME]} WHERE MacAddress NOT IN (SELECT DISTINCT MacAddress FROM ${sql_func[TABLE_NAME]});"
    # SQL for showing unique values
    sql_func[SHOW_DISTINCT_SCAN_DATA]="SELECT DISTINCT IpAddress,Hostname,MacAddress FROM ${sql_func[SCANNED_TABLE_NAME]} WHERE MacAddress NOT IN (SELECT DISTINCT MacAddress FROM ${sql_func[TABLE_NAME]});"
    # SQL for Dropping Tables
    sql_func[DROP_SCAN_TABLE]="DROP TABLE IF EXISTS ${sql_func[SCANNED_TABLE_NAME]};"
    # SQL for Querying
    sql_func[SEARCH_DB_SIMILAR]="SELECT Hostname,IpAddress,MacAddress FROM ${sql_func[TABLE_NAME]} WHERE Hostname LIKE '$STRING%';"
    sql_func[SEARCH_DB_EXACT]="SELECT Hostname,IpAddress,MacAddress FROM ${sql_func[TABLE_NAME]} WHERE Hostname='$STRING';"
    sql_func[SELECT_MAC_ADDR]="SELECT MacAddress FROM ${sql_func[TABLE_NAME]} WHERE Hostname='$STRING';"
    sql_func[SELECT_ALL_MAC_ADDR]="SELECT MacAddress FROM ${sql_func[TABLE_NAME]};"
    sql_func[COUNT_TABLE_ROWS]="SELECT COUNT (*) FROM ${sql_func[TABLE_NAME]};"
    sql_func[COUNT_SCAN_TABLE_ROWS]="SELECT COUNT (*) FROM ${sql_func[SCANNED_TABLE_NAME]};" # Not used yet

    echo "${sql_func["$1"]}"
}
config_file()
{
    cat <<- _EOF_
# Configuration file for the WakeLAN script.
# Values are double quoted, and leaving a value blank 
# is not recommended.

# Enter your network information here (with CIDR)
# (ex. 192.168.1.0/24)
LAN=

# DB Options - this controls how data is displayed
HEADER_ENABLE=".headers on"
TABLE_MODE=".mode column"
TABLE_WIDTH=".width 16, 20, 17"
_EOF_
}

config_settings()
{
    if [[ -f $CONFIG_FILE ]]; then
        . $CONFIG_FILE
    else
        echo "Configuration Missing!"
	echo "Creating new config file"
        config_file >> $CONFIG_FILE
	echo "Please open $CONFIG_FILE and add Network Info."
	echo "then re-run"
	exit
    fi
}

config_load()
{
    echo -e "$HEADER_ENABLE\n$TABLE_MODE\n$TABLE_WIDTH"
}

do_scan_import() # uses nbtscan (Best Option so far)
{
    config_settings
    check_db # Starts first to see if db exists.
    make_tmp
    echo "Now scanning the $LAN Network. Please be patient."
    nbtscan -s, $LAN 2>/dev/null | sed -e 's/ //g' |\
    cut -f 1,2,5 -d, >> $TEMP_FILE
    $SQLITE $DB_FILE "$(load_sql SCAN_TABLE_STRUCTURE)"
    echo -e '.separator ,'"\n"'.import' "$TEMP_FILE" $(load_sql SCANNED_TABLE_NAME) \
    | $SQLITE $DB_FILE
    clean_up
    make_tmp
    # Sets Display settings, and show what will be imported.
    config_load >> $TEMP_FILE
    load_sql SHOW_DISTINCT_SCAN_DATA >> $TEMP_FILE 
    echo "Displaying records to be imported."
    $SQLITE $DB_FILE < $TEMP_FILE
    echo -e "Import? [y/n]---> \c"
    read selection
    case $selection in
        [yY] )  $SQLITE $DB_FILE "$(load_sql IMPORT_DISTINCT_SCAN_DATA)"
                $SQLITE $DB_FILE "$(load_sql DROP_SCAN_TABLE)" ;;
        [nN] )  $SQLITE $DB_FILE "$(load_sql DROP_SCAN_TABLE)"
                exit ;;
        *)	    echo "Invalid entry. Abort" # Fix this up a bit
                exit ;; 
    esac
    clean_up
}

graceful_exit()
{
	clean_up
	exit
}

signal_exit()
{
    case $1 in
        INT)  echo "$PROGNAME: Program aborted by user" >&2
              clean_up ; exit ;;
        TERM)  echo "$PROGNAME: Program terminated" >&2
               clean_up ; exit ;;
        *)	  error_exit "$PROGNAME: Terminating on unknown signal"
              ;;
    esac
}

clean_up()
{
    rm -f ${TEMP_FILE}
}

error_exit()
{
    echo "${PROGNAME}: ${1:-"Unknown Error"}" >&2
    clean_up
    exit 1
}

make_tmp()
{
    if [ -d ~/tmp ]; then
        TEMP_DIR=~/tmp
    else
        TEMP_DIR=/tmp
    fi
    TEMP_FILE=$(mktemp -q "${TEMP_DIR}/${PROGNAME}.$$.XXXX")
    if [ "$TEMP_FILE" = "" ]; then
        echo "cannot create temp file!"
        exit 1
    fi
}

check_db() 
{
    if [[ -f $DB_FILE ]]; then
        sleep 0s
    else
        echo "Creating new Database: $DB_FILE"
        cat /dev/null > $DB_FILE
        $SQLITE $DB_FILE "$(load_sql INITIAL_TABLE_STRUCTURE)"
    fi
}

search_db()
{
    # Create temp file to hold config and query
    make_tmp
    # copy config into temp file
    config_load >> $TEMP_FILE
    echo -e "Enter Search Term ---> \c"
    read STRING
    # Copy created query into temp file as well
    load_sql SEARCH_DB_SIMILAR >> $TEMP_FILE
    $SQLITE $DB_FILE < $TEMP_FILE
    clean_up
}

do_wakeup_one()
{
    make_tmp
    config_load >> $TEMP_FILE
    echo -e "Enter Name of PC to wakeup ---> \c"
    read STRING
    load_sql SEARCH_DB_EXACT >> $TEMP_FILE
    $SQLITE $DB_FILE < $TEMP_FILE
    echo -e "Wakeup? [y/n] ---> \c"
    read selection
    local MAC_ADDR=$(load_sql SELECT_MAC_ADDR | $SQLITE $DB_FILE)
    case $selection in
        [yY] ) wakeonlan $MAC_ADDR  ;;
        [nN] ) echo "Exiting" ; exit ;;
        * )    echo "invalid entry" ; exit ;;
    esac
    clean_up
}

do_wakeup_all()
{
   echo -e "WARNING: This will attempt to start all\
 $(load_sql COUNT_TABLE_ROWS | $SQLITE $DB_FILE)\
 entries currently in the database.\nAre you sure?[y/n]---> \c"
    read selection
    local MAC_ADDR=$(load_sql SELECT_ALL_MAC_ADDR | $SQLITE $DB_FILE)
    case $selection in
        [yY] ) wakeonlan $MAC_ADDR  ;;
        [nN] ) exit ;;
        * )    echo "invalid entry" ; exit ;;
    esac
    clean_up
}

package_check() 
{  
    REQ_PKGS=("wakeonlan" "nbtscan" "sqlite3")
    UNMET_PKGS=()
    OPT_PKGS=()
    UNMET_OPT_PKGS=()

    for PACKAGE in "${REQ_PKGS[@]}" ; do
        command -v $PACKAGE 1>/dev/null
        if [ $? = "0" ] ; then
            sleep 0s
        else
            UNMET_PKGS=("${UNMET_PKGS[@]}" "$PACKAGE")
        fi
    done

    for PACKAGE in "${OPT_PKGS[@]}" ; do
        command -v $PACKAGE 1>/dev/null
        if [ $? = "0" ] ; then
            sleep 0s
        else
            UNMET_OPT_PKGS=("${UNMET_OPT_PKGS[@]}" "$PACKAGE")
        fi
    done

    if [ "${#UNMET_OPT_PKGS[@]}" = "0" ] ; then
        sleep 0s
    else
        for i in "${UNMET_OPT_PKGS[@]}" ; do 
            echo "$i is missing. (Optional)"
        done
    fi

    if [ "${#UNMET_PKGS[@]}" = "0" ] ; then
        sleep 0s
    else
        for i in "${UNMET_PKGS[@]}" ; do 
            echo "$i is missing. (Required)"
        done
        exit 32
    fi
}

# Results of the 'time' command on do_scan_import (on new db):
# real	0m9.362s
# user	0m0.028s
# sys	0m0.088s

# Results of the 'time' command on do_scan_import (on existing db):
# real	0m8.471s
# user	0m0.044s
# sys	0m0.060s

# Results of 'time' command on do_scan_import (on new db using load_sql):
# real	0m10.237s
# user	0m0.036s
# sys   0m0.076s

# Results of 'time' command on do_scan_import (on existing db using load_sql):
# real	0m11.465s
# user	0m0.024s
# sys	0m0.084s

# Results of 'time' command on do_scan_import (modified; new db):
# real	0m7.021s
# user	0m0.004s
# sys	0m0.032s

# Results of 'time' command on do_scan_import (modified; existing db):
# real	0m7.163s
# user	0m0.008s
# sys	0m0.020s

set -x
do_scan_import
