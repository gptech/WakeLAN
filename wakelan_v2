#!/bin/bash
#       wakelan- Wakes up computers on LAN.
#       Copyright 2012 Lemar Carthens <lemar.carthens1@gmail.com>
#       Version 2 - SQLite Support
#       Resources from: http://quickies.andreaolivato.net/post/133473114/using-sqlite3-in-bash
#                       http://stackoverflow.com/questions/2049109/how-to-import-sql-into-sqlite3
PROGNAME=$(basename $0)
VERSION="2.0"

SQLITE="sqlite3"
CONFIG_FILE=".wakelan.conf"
# DB Variables
DB_FILE="wakelan.db"
TABLE_NAME="client"

config_file()
{
    cat <<- _EOF_
# Configuration file for the WakeLAN Script
# Values are double quoted, and leaving a value blank is
# not recommended.

# Enter your network information here with CIDR
# (ex. 192.168.1.0/24)
LAN=

# DB Options - this controls how data is displayed
HEADER_ENABLE=".headers on"
TABLE_MODE=".mode column"
TABLE_WIDTH=".width 16, 20, 20"
_EOF_
}

config_settings()
{
    if [[ -f $CONFIG_FILE ]]; then
        . $CONFIG_FILE
    else
        echo "Configuration Missing!"
	echo "Creating new config file"
        config_file >> $CONFIG_FILE
	echo "Please open $CONFIG_FILE and add Network Info."
	echo "then re-run"
	exit
    fi
}

do_scan_import() # uses nbtscan (Best Option so far)
{
    check_db # Starts first to see if database exists. In Short, this MUST START FIRST!!
    make_tmp
    local TIMESTAMP=$(date +%m%d%y_%H%M%S)
    SCANNED_TABLE_NAME="client_$TIMESTAMP"
    local STRUCTURE="CREATE TABLE $SCANNED_TABLE_NAME (id INTEGER PRIMARY KEY,IpAddress TEXT,Hostname TEXT COLLATE NOCASE, MacAddress TEXT COLLATE NOCASE,UNIQUE(id,Hostname,MacAddress) ON CONFLICT REPLACE );"
    echo "Now scanning the $LAN Network. Please be patient."
    nbtscan -s, $LAN 2>/dev/null | sed -e 's/ //g' | cut -f 1,2,5 -d, >> $TEMP_FILE
    $SQLITE $DB_FILE "$STRUCTURE"
    local counter=$(wc -l $TEMP_FILE | awk '{print $1-1}') #awk can do math, so the '-1' helps correct for the array
    ip_array=(`cat $TEMP_FILE | cut -f 1 -d,`)
    host_array=(`cat $TEMP_FILE | cut -f 2 -d,`)
    mac_array=(`cat $TEMP_FILE | cut -f 3 -d,`)
    until [ $counter -eq -1 ]; do # Items in an array are counted from 0 instead of 1, so this corrects for it.
        echo "INSERT INTO $SCANNED_TABLE_NAME (IpAddress,Hostname,MacAddress) VALUES ('${ip_array[$counter]}','${host_array[$counter]}','${mac_array[$counter]}');"\
        | $SQLITE $DB_FILE
        let counter=counter-1
    done
    clean_up
    
    make_tmp
    # Sets Display settings, and show what will be imported.
    echo -e "$HEADER_ENABLE\n$TABLE_MODE\n$TABLE_WIDTH"\
     >> $TEMP_FILE
    echo "SELECT DISTINCT IpAddress,Hostname,MacAddress FROM $SCANNED_TABLE_NAME WHERE MacAddress NOT IN (SELECT DISTINCT MacAddress FROM $TABLE_NAME);"\
     >> $TEMP_FILE 
    echo "Displaying records to be imported."
    $SQLITE $DB_FILE < $TEMP_FILE
    echo -e "Import? [y/n]---> \c"
    read selection
    case $selection in
        [yY] )  echo "INSERT INTO $TABLE_NAME (IpAddress,Hostname,MacAddress) SELECT DISTINCT IpAddress,Hostname,MacAddress FROM $SCANNED_TABLE_NAME WHERE MacAddress NOT IN (SELECT DISTINCT MacAddress FROM $TABLE_NAME);"\
                | $SQLITE $DB_FILE && echo "DROP TABLE IF EXISTS $SCANNED_TABLE_NAME;"\
                | $SQLITE $DB_FILE ;;
        [nN] ) echo "DROP TABLE IF EXISTS $SCANNED_TABLE_NAME;"
            =exit ;;
        *)	   echo "Invalid entry. Abort" # Fix this up a bit
            exit ;; 
    esac
    clean_up
}

graceful_exit()
{
	clean_up
	exit
}

signal_exit()
{
    case $1 in
	INT)	echo "$PROGNAME: Program aborted by user" >&2
		clean_up ; exit ;;
	TERM)	echo "$PROGNAME: Program terminated" >&2
		clean_up ; exit ;;
	*)	error_exit "$PROGNAME: Terminating on unknown signal"
        ;;
    esac
}

clean_up()
{
    rm -f ${TEMP_FILE}
}

error_exit()
{
    echo "${PROGNAME}: ${1:-"Unknown Error"}" >&2
    clean_up
    exit 1
}

make_tmp()
{
    if [ -d ~/tmp ]; then
	TEMP_DIR=~/tmp
    else
	TEMP_DIR=/tmp
    fi
    TEMP_FILE=$(mktemp -q "${TEMP_DIR}/${PROGNAME}.$$.XXXXXX")
    if [ "$TEMP_FILE" = "" ]; then
	echo "cannot create temp file!"
    exit 1
    fi
}

check_db() 
{
    if [[ -f $DB_FILE ]]; then
        sleep 0s
    else
        echo "Creating new Database: $DB_FILE"
        local STRUCTURE="CREATE TABLE $TABLE_NAME (id INTEGER PRIMARY KEY,IpAddress TEXT,Hostname TEXT COLLATE NOCASE, MacAddress TEXT COLLATE NOCASE,UNIQUE(id,Hostname,MacAddress) ON CONFLICT REPLACE );"
        cat /dev/null > $DB_FILE
        $SQLITE $DB_FILE "$STRUCTURE"
    fi
}

search_db()
{
    # Create temp file to hold config and query
    make_tmp
    # copy config into temp file
    echo -e "$HEADER_ENABLE\n$TABLE_MODE\n$TABLE_WIDTH" >> $TEMP_FILE
    echo -e "Enter Search Term ---> \c"
    read STRING
    # Copy created query into temp file as well
    echo "SELECT Hostname,IpAddress,MacAddress FROM\
   $TABLE_NAME WHERE Hostname LIKE '$STRING%';"\
    >> $TEMP_FILE
    $SQLITE $DB_FILE < $TEMP_FILE
    clean_up
}

do_start_wakeup()
{
    make_tmp
    echo -e "$HEADER_ENABLE\n$TABLE_MODE\n$TABLE_WIDTH" >> $TEMP_FILE
    echo -e "Enter Name of PC to wakeup ---> \c"
    read STRING
    echo "SELECT Hostname,IpAddress,MacAddress FROM $TABLE_NAME WHERE Hostname='$STRING';" >> $TEMP_FILE
    $SQLITE $DB_FILE < $TEMP_FILE
    echo -e "Wakeup? [y/n] ---> \c"
    read selection
    local WAKEMAC="SELECT MacAddress FROM $TABLE_NAME WHERE Hostname='$STRING';"
    local MAC_ADDR=$(echo $WAKEMAC | $SQLITE $DB_FILE)
    case $selection in
        [yY] ) wakeonlan $MAC_ADDR  ;;
        [nN] ) echo "Exiting" ; exit ;;
        * )    echo "invalid entry" ; exit ;;
    esac
    clean_up
}

package_check() 
{  
    REQ_PKGS=("wakeonlan" "nbtscan" "sqlite3")
    UNMET_PKGS=()
    OPT_PKGS=()
    UNMET_OPT_PKGS=()

    for PACKAGE in "${REQ_PKGS[@]}" ; do
        command -v $PACKAGE 1>/dev/null
        if [ $? = "0" ] ; then
            sleep 0s
        else
            UNMET_PKGS=("${UNMET_PKGS[@]}" "$PACKAGE")
        fi
    done

    for PACKAGE in "${OPT_PKGS[@]}" ; do
        command -v $PACKAGE 1>/dev/null
        if [ $? = "0" ] ; then
            sleep 0s
        else
            UNMET_OPT_PKGS=("${UNMET_OPT_PKGS[@]}" "$PACKAGE")
        fi
    done

    if [ "${#UNMET_OPT_PKGS[@]}" = "0" ] ; then
        sleep 0s
    else
        for i in "${UNMET_OPT_PKGS[@]}" ; do 
            echo "$i is missing. (Optional)"
        done
    fi

    if [ "${#UNMET_PKGS[@]}" = "0" ] ; then
        menu
    else
        for i in "${UNMET_PKGS[@]}" ; do 
            echo "$i is missing. (Required)"
        done
        exit 32
    fi
}

# Results of the 'time' command on do_scan_import (on new db):
# real	0m9.362s
# user	0m0.028s
# sys	0m0.088s

# Results of the 'time' command on do_scan_import (on existing db):
# real	0m8.471s
# user	0m0.044s
# sys	0m0.060s
set -x
config_settings
do_scan_import
search_db
do_start_wakeup

